// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "open-api-games/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// BalanceDecrementByUserUIDAndCurrency provides a mock function with given fields: ctx, userUID, currency, amount
func (_m *Repository) BalanceDecrementByUserUIDAndCurrency(ctx context.Context, userUID string, currency string, amount int) (*domain.Transaction, error) {
	ret := _m.Called(ctx, userUID, currency, amount)

	if len(ret) == 0 {
		panic("no return value specified for BalanceDecrementByUserUIDAndCurrency")
	}

	var r0 *domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) (*domain.Transaction, error)); ok {
		return rf(ctx, userUID, currency, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *domain.Transaction); ok {
		r0 = rf(ctx, userUID, currency, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, userUID, currency, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BalanceGetByUserUIDAndCurrency provides a mock function with given fields: ctx, userUID, currency
func (_m *Repository) BalanceGetByUserUIDAndCurrency(ctx context.Context, userUID string, currency string) (*domain.Balance, error) {
	ret := _m.Called(ctx, userUID, currency)

	if len(ret) == 0 {
		panic("no return value specified for BalanceGetByUserUIDAndCurrency")
	}

	var r0 *domain.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Balance, error)); ok {
		return rf(ctx, userUID, currency)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Balance); ok {
		r0 = rf(ctx, userUID, currency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userUID, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BalanceIncrementByUserUIDAndCurrency provides a mock function with given fields: ctx, userUID, currency, amount
func (_m *Repository) BalanceIncrementByUserUIDAndCurrency(ctx context.Context, userUID string, currency string, amount int) (*domain.Transaction, error) {
	ret := _m.Called(ctx, userUID, currency, amount)

	if len(ret) == 0 {
		panic("no return value specified for BalanceIncrementByUserUIDAndCurrency")
	}

	var r0 *domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) (*domain.Transaction, error)); ok {
		return rf(ctx, userUID, currency, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *domain.Transaction); ok {
		r0 = rf(ctx, userUID, currency, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, userUID, currency, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CurrencyGetByCode provides a mock function with given fields: ctx, code
func (_m *Repository) CurrencyGetByCode(ctx context.Context, code string) (*domain.Currency, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for CurrencyGetByCode")
	}

	var r0 *domain.Currency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Currency, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Currency); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Currency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionGetByUID provides a mock function with given fields: ctx, uid
func (_m *Repository) SessionGetByUID(ctx context.Context, uid string) (*domain.Session, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for SessionGetByUID")
	}

	var r0 *domain.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Session, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Session); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionGetByUID provides a mock function with given fields: ctx, uid
func (_m *Repository) TransactionGetByUID(ctx context.Context, uid string) (*domain.Transaction, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for TransactionGetByUID")
	}

	var r0 *domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Transaction, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Transaction); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGetByUID provides a mock function with given fields: ctx, uid
func (_m *Repository) UserGetByUID(ctx context.Context, uid string) (*domain.User, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for UserGetByUID")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
